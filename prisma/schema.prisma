generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COLLABORATOR
}

model Organization {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique
  users     User[]
  projects  Project[]
  boards    Board[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id             String       @id @default(uuid()) @db.Uuid
  email          String       @unique
  password       String
  name           String
  role           UserRole     @default(COLLABORATOR)
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdCards   Card[]       @relation("CardCreator")
  assignedCards  Card[]       @relation("CardAssignees")
  boards         Board[]      @relation("BoardMembers")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Project {
  id             String       @id @default(uuid()) @db.Uuid
  name           String
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  boards         Board[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Board {
  id             String       @id @default(uuid()) @db.Uuid
  name           String
  color          String
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  projectId      String       @db.Uuid
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns        Column[]
  members        User[]       @relation("BoardMembers")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Column {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  boardId   String   @db.Uuid
  position  Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  columnId    String   @db.Uuid
  position    Int
  creatorId   String   @db.Uuid
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  creator     User     @relation("CardCreator", fields: [creatorId], references: [id])
  assignees   User[]   @relation("CardAssignees")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}